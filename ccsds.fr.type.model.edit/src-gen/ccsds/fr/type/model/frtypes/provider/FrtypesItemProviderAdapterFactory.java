/**
 */
package ccsds.fr.type.model.frtypes.provider;

/*-
 * #%L
 * CCSDS Functional Resource Type Model Edit
 * %%
 * Copyright (C) 2022 European Space Agency
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */

import ccsds.fr.type.model.frtypes.util.FrtypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FrtypesItemProviderAdapterFactory extends FrtypesAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FrtypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.TypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDefinitionItemProvider typeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.TypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDefinitionAdapter() {
		if (typeDefinitionItemProvider == null) {
			typeDefinitionItemProvider = new TypeDefinitionItemProvider(this);
		}

		return typeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.Boolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanItemProvider booleanItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.Boolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanAdapter() {
		if (booleanItemProvider == null) {
			booleanItemProvider = new BooleanItemProvider(this);
		}

		return booleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.IntegerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerTypeItemProvider integerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.IntegerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerTypeAdapter() {
		if (integerTypeItemProvider == null) {
			integerTypeItemProvider = new IntegerTypeItemProvider(this);
		}

		return integerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.BitString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BitStringItemProvider bitStringItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.BitString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBitStringAdapter() {
		if (bitStringItemProvider == null) {
			bitStringItemProvider = new BitStringItemProvider(this);
		}

		return bitStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.OctetString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OctetStringItemProvider octetStringItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.OctetString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOctetStringAdapter() {
		if (octetStringItemProvider == null) {
			octetStringItemProvider = new OctetStringItemProvider(this);
		}

		return octetStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.Real} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealItemProvider realItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.Real}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealAdapter() {
		if (realItemProvider == null) {
			realItemProvider = new RealItemProvider(this);
		}

		return realItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.Enumerated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumeratedItemProvider enumeratedItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.Enumerated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumeratedAdapter() {
		if (enumeratedItemProvider == null) {
			enumeratedItemProvider = new EnumeratedItemProvider(this);
		}

		return enumeratedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.CharacterString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharacterStringItemProvider characterStringItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.CharacterString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharacterStringAdapter() {
		if (characterStringItemProvider == null) {
			characterStringItemProvider = new CharacterStringItemProvider(this);
		}

		return characterStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.Sequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceItemProvider sequenceItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.Sequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceAdapter() {
		if (sequenceItemProvider == null) {
			sequenceItemProvider = new SequenceItemProvider(this);
		}

		return sequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.SequenceOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceOfItemProvider sequenceOfItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.SequenceOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceOfAdapter() {
		if (sequenceOfItemProvider == null) {
			sequenceOfItemProvider = new SequenceOfItemProvider(this);
		}

		return sequenceOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.Set} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetItemProvider setItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.Set}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetAdapter() {
		if (setItemProvider == null) {
			setItemProvider = new SetItemProvider(this);
		}

		return setItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.SetOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetOfItemProvider setOfItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.SetOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetOfAdapter() {
		if (setOfItemProvider == null) {
			setOfItemProvider = new SetOfItemProvider(this);
		}

		return setOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.SizeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SizeConstraintItemProvider sizeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.SizeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSizeConstraintAdapter() {
		if (sizeConstraintItemProvider == null) {
			sizeConstraintItemProvider = new SizeConstraintItemProvider(this);
		}

		return sizeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.ValueRangeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueRangeConstraintItemProvider valueRangeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.ValueRangeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueRangeConstraintAdapter() {
		if (valueRangeConstraintItemProvider == null) {
			valueRangeConstraintItemProvider = new ValueRangeConstraintItemProvider(this);
		}

		return valueRangeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.NamedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedValueItemProvider namedValueItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.NamedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedValueAdapter() {
		if (namedValueItemProvider == null) {
			namedValueItemProvider = new NamedValueItemProvider(this);
		}

		return namedValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.Choice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceItemProvider choiceItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.Choice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceAdapter() {
		if (choiceItemProvider == null) {
			choiceItemProvider = new ChoiceItemProvider(this);
		}

		return choiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.TypeReferenceLocal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeReferenceLocalItemProvider typeReferenceLocalItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.TypeReferenceLocal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeReferenceLocalAdapter() {
		if (typeReferenceLocalItemProvider == null) {
			typeReferenceLocalItemProvider = new TypeReferenceLocalItemProvider(this);
		}

		return typeReferenceLocalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.SingleValueConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleValueConstraintItemProvider singleValueConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.SingleValueConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleValueConstraintAdapter() {
		if (singleValueConstraintItemProvider == null) {
			singleValueConstraintItemProvider = new SingleValueConstraintItemProvider(this);
		}

		return singleValueConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.PermittedAlphabetConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PermittedAlphabetConstraintItemProvider permittedAlphabetConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.PermittedAlphabetConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPermittedAlphabetConstraintAdapter() {
		if (permittedAlphabetConstraintItemProvider == null) {
			permittedAlphabetConstraintItemProvider = new PermittedAlphabetConstraintItemProvider(this);
		}

		return permittedAlphabetConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.ObjectIdentifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectIdentifierItemProvider objectIdentifierItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.ObjectIdentifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectIdentifierAdapter() {
		if (objectIdentifierItemProvider == null) {
			objectIdentifierItemProvider = new ObjectIdentifierItemProvider(this);
		}

		return objectIdentifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementItemProvider elementItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementAdapter() {
		if (elementItemProvider == null) {
			elementItemProvider = new ElementItemProvider(this);
		}

		return elementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.TypeReferenceExternal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeReferenceExternalItemProvider typeReferenceExternalItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.TypeReferenceExternal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeReferenceExternalAdapter() {
		if (typeReferenceExternalItemProvider == null) {
			typeReferenceExternalItemProvider = new TypeReferenceExternalItemProvider(this);
		}

		return typeReferenceExternalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.Null} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullItemProvider nullItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.Null}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullAdapter() {
		if (nullItemProvider == null) {
			nullItemProvider = new NullItemProvider(this);
		}

		return nullItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsds.fr.type.model.frtypes.FromModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FromModuleItemProvider fromModuleItemProvider;

	/**
	 * This creates an adapter for a {@link ccsds.fr.type.model.frtypes.FromModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFromModuleAdapter() {
		if (fromModuleItemProvider == null) {
			fromModuleItemProvider = new FromModuleItemProvider(this);
		}

		return fromModuleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (typeDefinitionItemProvider != null)
			typeDefinitionItemProvider.dispose();
		if (booleanItemProvider != null)
			booleanItemProvider.dispose();
		if (integerTypeItemProvider != null)
			integerTypeItemProvider.dispose();
		if (bitStringItemProvider != null)
			bitStringItemProvider.dispose();
		if (octetStringItemProvider != null)
			octetStringItemProvider.dispose();
		if (realItemProvider != null)
			realItemProvider.dispose();
		if (enumeratedItemProvider != null)
			enumeratedItemProvider.dispose();
		if (characterStringItemProvider != null)
			characterStringItemProvider.dispose();
		if (sequenceItemProvider != null)
			sequenceItemProvider.dispose();
		if (sequenceOfItemProvider != null)
			sequenceOfItemProvider.dispose();
		if (setItemProvider != null)
			setItemProvider.dispose();
		if (setOfItemProvider != null)
			setOfItemProvider.dispose();
		if (sizeConstraintItemProvider != null)
			sizeConstraintItemProvider.dispose();
		if (valueRangeConstraintItemProvider != null)
			valueRangeConstraintItemProvider.dispose();
		if (namedValueItemProvider != null)
			namedValueItemProvider.dispose();
		if (choiceItemProvider != null)
			choiceItemProvider.dispose();
		if (typeReferenceLocalItemProvider != null)
			typeReferenceLocalItemProvider.dispose();
		if (singleValueConstraintItemProvider != null)
			singleValueConstraintItemProvider.dispose();
		if (permittedAlphabetConstraintItemProvider != null)
			permittedAlphabetConstraintItemProvider.dispose();
		if (moduleItemProvider != null)
			moduleItemProvider.dispose();
		if (objectIdentifierItemProvider != null)
			objectIdentifierItemProvider.dispose();
		if (elementItemProvider != null)
			elementItemProvider.dispose();
		if (typeReferenceExternalItemProvider != null)
			typeReferenceExternalItemProvider.dispose();
		if (nullItemProvider != null)
			nullItemProvider.dispose();
		if (fromModuleItemProvider != null)
			fromModuleItemProvider.dispose();
	}

}
